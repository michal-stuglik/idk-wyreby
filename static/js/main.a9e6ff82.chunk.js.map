{"version":3,"sources":["MainMap.js","App.js","serviceWorker.js","index.js"],"names":["BaseLayer","LayersControl","Overlay","onEachFeature","feature","layer","properties","title","bindPopup","popupContent","center","MainMap","props","state","zoom","data","collapsed","collapseOpen","axios","get","params","then","setState","catch","error","Promise","reject","this","Map","position","checked","name","TileLayer","attribution","url","WMSTileLayer","format","layers","FeatureGroup","color","GeoJSON","key","sticky","Button","variant","onClick","aria-controls","aria-expanded","Collapse","in","Card","style","width","Body","Title","Subtitle","className","Text","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.a9e6ff82.chunk.js","sourcesContent":["import React from 'react'\nimport {FeatureGroup, GeoJSON, LayersControl, Map, TileLayer, WMSTileLayer} from 'react-leaflet';\nimport axios from 'axios';\nimport {CoordinatesControl} from 'react-leaflet-coordinates';\nimport {BoxZoomControl} from 'react-leaflet-box-zoom'\nimport Control from 'react-leaflet-control';\nimport {Button, Card, Collapse} from 'react-bootstrap';\nimport {FaInfo} from \"react-icons/fa\";\n\nconst {BaseLayer, Overlay} = LayersControl;\n\nfunction onEachFeature(feature, layer) {\n    if (feature.properties && feature.properties.title) {\n        layer.bindPopup(feature.properties.popupContent);\n    }\n}\n\nconst center = [49.20, 22.5];\n\nexport default class MainMap extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            zoom: 12,\n            data: [],\n            collapsed: true,\n            center: center,\n            collapseOpen: false\n        };\n    }\n\n    componentDidMount() {\n\n        const dataUrl = 'https://polistes.net/idk/data.json';\n        // const dataUrl = 'data.json';\n\n        axios.get(dataUrl, {params: {}}\n        )\n            .then(({data}) => this.setState({data}))\n            .catch(error => Promise.reject(error));\n    };\n\n    render() {\n\n        const data = this.state.data;\n        // console.log(data);\n\n        return (\n            <div>\n                <Map center={this.state.center} zoom={this.state.zoom}>\n\n                    <LayersControl position=\"topright\">\n                        <BaseLayer checked name=\"OSM Mapnik\">\n                            <TileLayer\n                                attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                            />\n                        </BaseLayer>\n\n                        {/*<BaseLayer name=\"OSM B&W\">*/}\n                        {/*    <TileLayer*/}\n                        {/*        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'*/}\n                        {/*        url=\"https://tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png\"*/}\n                        {/*    />*/}\n                        {/*</BaseLayer>*/}\n\n                        <BaseLayer name=\"ESRI Imagery\">\n                            <TileLayer\n                                url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\n                                attribution='&copy; <a href=\"Esri &mdash\">Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community</a> contributors'\n                            />\n                        </BaseLayer>\n\n                        <BaseLayer name=\"ESRI NatGeoWorldMap\">\n                            <TileLayer\n                                url=\"https://server.arcgisonline.com/ArcGIS/rest/services/NatGeo_World_Map/MapServer/tile/{z}/{y}/{x}\"\n                                attribution='&copy; <a href=\"Esri &mdash\">Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community</a> contributors'\n                            />\n                        </BaseLayer>\n\n                        {/*<BaseLayer name=\"OpenTopoMap\">*/}\n                        {/*    <TileLayer*/}\n                        {/*        url=\"https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png\"*/}\n                        {/*        attribution='attribution: Map data: &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, <a href=\"http://viewfinderpanoramas.org\">SRTM</a> | Map style: &copy; <a href=\"https://opentopomap.org\">OpenTopoMap</a> (<a href=\"https://creativecommons.org/licenses/by-sa/3.0/\">CC-BY-SA</a>)'*/}\n                        {/*    />*/}\n                        {/*</BaseLayer>*/}\n\n                        <BaseLayer name=\"Bank Danych o Lasach\">\n                            <WMSTileLayer\n                                attribution='&amp; Bank Danych o Lasach &copy; <a href=\"https://www.bdl.lasy.gov.pl/portal/\">Bank Danych o Lasach</a> '\n                                format=\"image/png\"\n                                layers={[1, 3, 5]}\n                                url=\"https://mapserver.bdl.lasy.gov.pl/ArcGIS/services/WMS_BDL/mapserver/WMSServer\"\n                            />\n                        </BaseLayer>\n\n                        <BaseLayer name=\"Rezerwaty\">\n                            <WMSTileLayer\n                                attribution='&amp; Generalna Dyrekcja Ochrony Środowiska &copy; <a href=\"http://geoserwis.gdos.gov.pl/mapy/\">Generalna Dyrekcja Ochrony Środowiska</a> '\n                                format=\"image/png\"\n                                url=\"http://sdi.gdos.gov.pl/wms?SERVICE=WMS&VERSION=1.1.1&LAYERS=Rezerwaty\"\n                            />\n                        </BaseLayer>\n\n                        <BaseLayer name=\"Parki Krajobrazowe\">\n                            <WMSTileLayer\n                                attribution='&amp; Generalna Dyrekcja Ochrony Środowiska &copy; <a href=\"http://geoserwis.gdos.gov.pl/mapy/\">Generalna Dyrekcja Ochrony Środowiska</a> '\n                                format=\"image/png\"\n                                url=\"http://sdi.gdos.gov.pl/wms?SERVICE=WMS&VERSION=1.1.1&LAYERS=ParkiKrajobrazowe\"\n                            />\n                        </BaseLayer>\n\n                        <BaseLayer name=\"Parki Narodowe\">\n                            <WMSTileLayer\n                                attribution='&amp; Generalna Dyrekcja Ochrony Środowiska &copy; <a href=\"http://geoserwis.gdos.gov.pl/mapy/\">Generalna Dyrekcja Ochrony Środowiska</a> '\n                                format=\"image/png\"\n                                url=\"http://sdi.gdos.gov.pl/wms?SERVICE=WMS&VERSION=1.1.1&LAYERS=ParkiNarodowe\"\n                            />\n                        </BaseLayer>\n\n                        <BaseLayer name=\"Obszary Chronionego Krajobrazu\">\n                            <WMSTileLayer\n                                attribution='&amp; Generalna Dyrekcja Ochrony Środowiska &copy; <a href=\"http://geoserwis.gdos.gov.pl/mapy/\">Generalna Dyrekcja Ochrony Środowiska</a> '\n                                format=\"image/png\"\n                                url=\"http://sdi.gdos.gov.pl/wms?SERVICE=WMS&VERSION=1.1.1&LAYERS=ObszaryChronionegoKrajobrazu\"\n                            />\n                        </BaseLayer>\n\n                        <BaseLayer name=\"Natura 2000 - obszary ptasie\">\n                            <WMSTileLayer\n                                attribution='&amp; Generalna Dyrekcja Ochrony Środowiska &copy; <a href=\"http://geoserwis.gdos.gov.pl/mapy/\">Generalna Dyrekcja Ochrony Środowiska</a> '\n                                format=\"image/png\"\n                                url=\"http://sdi.gdos.gov.pl/wms?SERVICE=WMS&VERSION=1.1.1&LAYERS=ObszarySpecjalnejOchrony\"\n                            />\n                        </BaseLayer>\n\n                        <BaseLayer name=\"Natura 2000 - obszary siedliskowe\">\n                            <WMSTileLayer\n                                attribution='&amp; Generalna Dyrekcja Ochrony Środowiska &copy; <a href=\"http://geoserwis.gdos.gov.pl/mapy/\">Generalna Dyrekcja Ochrony Środowiska</a> '\n                                format=\"image/png\"\n                                url=\"http://sdi.gdos.gov.pl/wms?SERVICE=WMS&VERSION=1.1.1&LAYERS=SpecjalneObszaryOchrony\"\n                            />\n                        </BaseLayer>\n\n                        <Overlay checked name=\"Wyręby\">\n                            <FeatureGroup color=\"purple\">\n                                <GeoJSON key={data['key']} data={data} onEachFeature={onEachFeature}/>\n                            </FeatureGroup>\n                        </Overlay>\n\n                    </LayersControl>\n\n                    <CoordinatesControl position='bottomleft'/>\n\n                    <BoxZoomControl\n                        position=\"topleft\"\n                        sticky={false}\n                    />\n\n                    <Control position=\"topleft\">\n                        <Button variant=\"light\"\n                                onClick={() => this.setState({collapseOpen: !this.state.collapseOpen})}\n                                aria-controls=\"example-collapse-text\"\n                                aria-expanded={this.state.collapseOpen}\n                        >\n                            <FaInfo/>\n                        </Button>\n                        <Collapse in={this.state.collapseOpen}>\n                            <Card style={{width: '16rem'}}>\n                                <Card.Body>\n                                    <Card.Title>What is Lorem Ipsum?</Card.Title>\n                                    <Card.Subtitle className=\"mb-2 text-muted\">Lorem Ipsum</Card.Subtitle>\n                                    <Card.Text>\n                                        Lorem Ipsum is simply dummy text of the printing and typesetting industry.\n                                        Lorem Ipsum has been the industry's standard dummy text ever since the 1500s,\n                                        when an unknown printer took a galley of type and scrambled it to make a type\n                                        specimen book.\n                                        It has survived not only five centuries, but also the leap into electronic\n                                        typesetting, remaining essentially unchanged.\n                                        It was popularised in the 1960s with the release of Letraset sheets containing\n                                        Lorem Ipsum passages,\n                                        and more recently with desktop publishing software like Aldus PageMaker\n                                        including versions of Lorem Ipsum..\n                                    </Card.Text>\n                                    {/*<Card.Link href=\"#\">Card Link</Card.Link>*/}\n                                    {/*<Card.Link href=\"#\">Another Link</Card.Link>*/}\n                                </Card.Body>\n                            </Card>\n                        </Collapse>\n\n                    </Control>\n\n                </Map>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport MainMap from \"./MainMap\";\nimport './App.css'\n\nfunction App() {\n    return (\n        <MainMap/>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}